<fsmddescription>
  <statelist>
    <state>INITIALIZE</state>
    <state>TEST</state>
    <state>AMINB</state>
    <state>BMINA</state>
    <state>PAD</state>
    <state>FINISH</state>
  </statelist>

  <initialstate>INITIALIZE</initialstate>

  <inputlist>
    <input>number</input>
    <input>temp</input>
  </inputlist>

  <variablelist>
    <variable>n</variable>
    <variable>bin</variable>
    <variable>r</variable>
    <variable>bit_count</variable>
  </variablelist>

  <operationlist>
    <operation>
      <name>init_n</name>
      <expression>n = number</expression>
    </operation>
    <operation>
      <name>init_bin</name>
      <expression>bin = ""</expression>
    </operation>
    <operation>
      <name>mod2</name>
      <expression>r = n % 2</expression>
    </operation>
    <operation>
      <name>div2</name>
      <expression>n = n // 2</expression>
    </operation>
    <operation>
      <name>to_bin</name>
      <expression>bin = r + bin</expression>
    </operation>
    <operation>
      <name>incr_bitcount</name>
      <expression>bit_count = bit_count + 1</expression>
    </operation>
    <operation>
      <name>pad_bin</name>
      <expression>bin = "0" + bin</expression>
    </operation>
  </operationlist>

  <conditionlist>
    <condition>
      <name>default</name>
      <expression>True</expression>
    </condition>
    <condition>
      <name>condition2</name>
      <expression>n == 0 and bit_count &lt; 8</expression>
    </condition>
    <condition>
      <name>n_positive</name>
      <expression>n &gt; 0</expression>
    </condition>
    <condition>
      <name>overbit</name>
      <expression>n == 0 and bit_count &gt;= 8</expression>
    </condition>
    <condition>
      <name>pad_incomplete</name>
      <expression>bit_count &lt; 8</expression>
    </condition>
    <condition>
      <name>pad_complete</name>
      <expression>bit_count == 8</expression>
    </condition>
  </conditionlist>

  <fsmd>
    <INITIALIZE>
      <transition>
        <condition>True</condition>
        <instruction>init_n init_bin</instruction>
        <nextstate>TEST</nextstate>
      </transition>
    </INITIALIZE>

    <TEST>
      <transition>
        <condition>n_positive</condition>
        <instruction>nop</instruction>
        <nextstate>AMINB</nextstate>
      </transition>
      <transition>
        <condition>condition2</condition>
        <instruction>nop</instruction>
        <nextstate>PAD</nextstate>
      </transition>
      <transition>
        <condition>overbit</condition>
        <instruction>nop</instruction>
        <nextstate>FINISH</nextstate>
      </transition>
    </TEST>

    <AMINB>
      <transition>
        <condition>True</condition>
        <instruction>mod2 div2</instruction>
        <nextstate>BMINA</nextstate>
      </transition>
    </AMINB>

    <BMINA>
      <transition>
        <condition>True</condition>
        <instruction>to_bin incr_bitcount</instruction>
        <nextstate>TEST</nextstate>
      </transition>
    </BMINA>

    <PAD>
      <transition>
        <condition>pad_incomplete</condition>
        <instruction>pad_bin incr_bitcount</instruction>
        <nextstate>PAD</nextstate>
      </transition>
      <transition>
        <condition>pad_complete</condition>
        <instruction>nop</instruction>
        <nextstate>FINISH</nextstate>
      </transition>
    </PAD>

    <FINISH>
      <transition>
        <condition>True</condition>
        <instruction>nop</instruction>
        <nextstate>FINISH</nextstate>
      </transition>
    </FINISH>
  </fsmd>
</fsmddescription>
